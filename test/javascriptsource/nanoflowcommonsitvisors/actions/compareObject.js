// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE

// END EXTRA CODE

/**
 * Compare two objects. The objects must be of the same entity.
 * @param {string} entity
 * @param {MxObject} fromObject
 * @param {MxObject} toObject
 * @param {boolean} writeToLog
 * @returns {Promise.<boolean>}
 */
export async function compareObject(entity, fromObject, toObject, writeToLog) {
	// BEGIN USER CODE

	if (!fromObject) {
		return Promise.reject("compareObject: from object is empty");
	}
	if (!toObject) {
		return Promise.reject("compareObject: to object is empty");
	}

	if (fromObject.getEntity() !== toObject.getEntity()) {
		return Promise.reject("compareObject: from object " + fromObject.getEntity() + " is a different entity type than to object " + toObject.getEntity());
	}

	const fromMetaObject = mx.meta.getEntity(fromObject.getEntity());

	const attrArray = fromMetaObject.getAttributes();
	
	for (const attrName of attrArray) {

		const fromValue = fromObject.get(attrName);
		const toValue = toObject.get(attrName);
		if (writeToLog) {
			console.info("compareObject: attr: " + attrName);
			console.info("compareObject: f: " + fromValue);
			console.info("compareObject: t: " + toValue);
		}
		if (fromValue && !toValue) {
			if (writeToLog) {
				console.info("compareObject: from value is set and to value is not (or false for a boolean) for " + attrName);
			}
			return false;
		}
		if (!fromValue && toValue) {
			if (writeToLog) {
				console.info("compareObject: to value is set and from value is not (or false for a boolean) for " + attrName);
			}
			return false;
		}
		if (fromValue && toValue) {
			if (fromMetaObject.isNumeric(attrName)) {
				// Any numeric value is a Big
				if (fromValue.eq(toValue)) {
					if (writeToLog) {
						console.info("compareObject: numeric value is the same for " + attrName);
					}
				} else {
					if (writeToLog) {
						console.info("compareObject: numeric value is not the same for " + attrName);
					}
					return false;
				}
			} else {
				// Anything else is a primitive. Reference is a string, date is a number value (epoch)
				if (fromValue == toValue) {
					if (writeToLog) {
						console.info("compareObject: value is the same for " + attrName);
					}
				} else {
					if (writeToLog) {
						console.info("compareObject: value is not the same for " + attrName);
					}
					return false;
				}
			}
		}
		if (!fromValue && !toValue) {
			if (writeToLog) {
				console.info("compareObject: from and to value is not set for " + attrName);
			}
		}
	}


	return true;

	// END USER CODE
}
