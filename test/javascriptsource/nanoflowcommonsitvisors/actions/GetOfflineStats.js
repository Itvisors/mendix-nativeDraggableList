// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE

import { createMxObject } from "../NanoflowCommonsITvisorsUtils";

// END EXTRA CODE

/**
 * Gets number of objects in offline database for each persistent entity found in the native app
 * @returns {Promise.<MxObject[]>}
 */
export async function GetOfflineStats() {
	// BEGIN USER CODE

	/**
	 * Create a promise that returns the count for one entity
	 * Resolves to undefined for non-persistent entities and anything not in the offline database 
	 * (We don't know that until we try to retrieve data for the entity)
	 */ 
	async function createStatisticsObject(entity) {
		return new Promise((resolve, reject) => {
			try {
				const filter = {limit : 1, offset : 0};
				mx.data.getOffline(entity, [], filter,
					function (mxobjs, count) {
						if (count !== undefined) {
							// console.info(entity + ": " + count);
							createMxObject("NanoflowCommonsITvisors.EntityStatistics").then(mxObj => {
								mxObj.set("Entity", entity);
								mxObj.set("ObjectCount", count);
								resolve(mxObj);
							});
						} else {
							// console.info("GetOfflineStats " + entity + " does not exist in the offline database or is non-persistent. Count is undefined");
							resolve(undefined);
						}
					},
					function () {
						// console.info("GetOfflineStats " + entity + " does not exist in the offline database or is non-persistent. Exception from getOffline");
						resolve(undefined);
					}
				);
			} catch (error) {
				if (error && error.message) {
					reject("GetOfflineStats getObjectCount " + entity + " exception: " + error.message);
				} else {
					reject("GetOfflineStats getObjectCount " + entity + " exception.");
				}
			}
		});
	}

	// The meta object in the client does not tell whether the entity is persistent or not.
	// So attempt to get an object count for all entities in the meta object list. 
	// Note that getMap does not return a real map but an object that contains entity names
	const resultArray = [];
	for (let entity in mx.meta.getMap()) {
		const statObj = await createStatisticsObject(entity);
		if (statObj) {
			resultArray.push(statObj);			
		}
	}
	
	return resultArray;
	// END USER CODE
}
